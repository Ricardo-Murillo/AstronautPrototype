<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_space</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set default values for player object's variables 
// author: Ricardo Murillo

enum states{
    jumping,
    grounded,
    falling,
    swinging
}
old_x = x;
old_y = y;

vel_x = 0;
vel_y = 0;
old_vel_x = 0;
old_vel_y = 0;

acc_x = 0;
acc_y = 0;
 
mass = 1;
ot = delta_time;
dt = 0.15;
walkspeed = 3;
var maxspeed = walkspeed;
var jumpheight = 30;
var jumpdistance = 20;
jump = (2*jumpheight*maxspeed)/(jumpdistance/2);
grav_acc = (2*jumpheight*power(maxspeed,2.0))/power(jumpheight,2);
//var jumptime = 20;
//grav = jumpheight/jumptime;
//grav_acc = grav / power(dt,2);
grav = 64;
//grav_acc = 2;
state = states.falling;

collisionblock = obj_block;

drawguides = true;
mobile_state = false;
chain = noone;
chain = instance_create(x,y,obj_chain);
chain.start = self;
chain.anchor = anchor_points.neither;
weight = instance_create(x,y,obj_weight);
chain.last = weight;

image_speed = 0.2;
image_xscale = 0.5;
image_yscale = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///recalculate velocity since chain might have moved it
// author: Ricardo Murillo

vel_x = (x- old_x)/dt;
vel_y = (y - old_y)/dt;

acc_x = (vel_x - old_vel_x)/dt;
acc_y = (vel_y - old_vel_y)/dt;

old_x = x;
old_y = y;
old_vel_x = vel_x;
old_vel_y = vel_y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = player.x - view_wview[0]/2;
view_yview[0] = player.y - view_hview[0]/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move player based on local velocities, input, and collisions 
// author: Ricardo Murillo

/*move_x = mouse_x - self.x;
move_y = mouse_y - self.y;

if(mouse_check_button_pressed(mb_left)){
    if (instance_position( mouse_x, mouse_y, self )){
        mobile_state = true;
    }
}

if(mouse_check_button_released(mb_left))
    mobile_state = false;
*/
/*if (mobile_state){
   //x += move_x;
   vel_x = move_x/dt;
   //y += move_y;
   vel_y = move_y/dt;
}else{
   vel_x = 0;
   //y += move_y;
   vel_y = 0;
}*/
dt = delta_time/100000;
//input
var input_right = get_right();
var input_left = get_left();
var input_right_re = get_rightreleased();
var input_left_re = get_leftreleased();
var input_jump = keyboard_check_pressed(vk_space);

//state changes
if (state != states.grounded){
    if (place_meeting(x,y+1,collisionblock)){
        state = states.grounded;
    }/*else if instance_exists(chain){
        if get_chain_length(chain)/chain.length &gt; 0.95 &amp;&amp; chain.last.y&lt;y{
            state = states.swinging;
        }
    }*/
}
if (state == states.grounded || state == states.jumping) &amp;&amp; vel_y &gt; 0{
    state = states.falling;
}
if (state == states.swinging){
    if get_chain_length(chain)/chain.length &lt;= 0.95 {
            state = states.falling;
        }
}


if(state == states.grounded){
    if(input_right_re || input_left_re){    
        vel_x = 0;
        image_speed = 0;
    }
    if (input_left &amp;&amp; !input_right){
        vel_x = -walkspeed/dt;
        image_speed = 0.2;
        image_xscale = -0.5;
    }
    if (input_right &amp;&amp; !input_left){
        vel_x = walkspeed/dt;
        image_speed = 0.2;
        image_xscale = 0.5;
    }
    if(input_jump){
        vel_y += -jump;
        state = states.jumping;
    }
}else  if(state == states.jumping ||state == states.falling){
    if (input_left &amp;&amp; !input_right){
        if vel_x &gt; -((walkspeed)/dt)
            vel_x += -0.2*(walkspeed/dt);
    }
    if (input_right &amp;&amp; !input_left){
        if vel_x &lt; ((walkspeed)/dt)
            vel_x += 0.2*(walkspeed/dt);
    //else if vel_x &lt; walkspeed
    //    vel_x += min(abs(vel_y/4),(walkspeed/dt)/2);
    }
    //if (!input_left &amp;&amp; !input_right){
        vel_x *= 0.9;
    //}
}

if (vel_y &lt; grav)
    vel_y += grav_acc *dt;    
    
//H collision
if (place_meeting(x+vel_x * dt,y,collisionblock)){
    while(!place_meeting(x+sign(vel_x),y,collisionblock)){
        x += sign(vel_x);
    }
    vel_x = 0;
}    
x += vel_x * dt;
//V collision
if (place_meeting(x,y+vel_y * dt,collisionblock)){ 
    while(!place_meeting(x,y+sign(vel_y),collisionblock)){
        y += sign(vel_y);
    }
    vel_y = 0;
}    
y += vel_y * dt;
ot = delta_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//if drawguides {}
draw_forces(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
